# You can use this file to manage environment variables. Each variable in this file is loaded as an environment variable
# when the corresponding environment is booted into. You can instead choose to use normal environment variables and that
# works fine too.

# The gem that does this is called Figaro.

development:
  # Required. Default should be fine if your postgresql server is running locally.
  DATABASE_URL: postgres://localhost

  # Required for login to work. Register an application @ twitch.tv/settings/connections.
  # When registering, use a redirect uri of http://localhost:3000/auth/twitch/callback
  TWITCH_CLIENT_ID:
  TWITCH_CLIENT_SECRET:


  # splits-io uses S3 to store splits. For development you probably don't want that, so run fakes3 instead. You can
  # start a local fakes3 server with
  #
  #   fakes3 -r /tmp -p 4567
  #
  # When AWS_REGION is set to `local`, the local fakes3 server will be used. AWS_ACCESS_KEY_ID and AWS_SECRET_KEY can be
  # any non-blank strings.
  #
  # Or, if you want to use a real S3 account, fill in its info here.
  S3_BUCKET: splits-io
  AWS_REGION: local
  AWS_ACCESS_KEY_ID: boop
  AWS_SECRET_KEY: beep

  STRIPE_PUBLISHABLE_KEY:
  STRIPE_SECRET_KEY:

  # Enable or diable the Gold feature. 1 is on, anything else is off.
  GOLD: "1"

test:
  # required to be able to run tests
  DATABASE_URL: postgres://localhost

  S3_BUCKET: splits-io
  AWS_REGION: local
  AWS_ACCESS_KEY_ID: boop
  AWS_SECRET_KEY: beep

# You don't need to change anything below this line.

production:
  DATABASE_URL:

  TWITCH_CLIENT_ID:
  TWITCH_CLIENT_SECRET:

  NEW_RELIC_LICENSE_KEY:
  ROLLBAR_ACCESS_TOKEN:

  SECRET_KEY_BASE:

  S3_BUCKET:
  AWS_REGION:
  AWS_ACCESS_KEY_ID:
  AWS_SECRET_KEY:

  STRIPE_PUBLISHABLE_KEY:
  STRIPE_SECRET_KEY:
